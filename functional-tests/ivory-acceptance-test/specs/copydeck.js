'use strict'
const copydeckPage = require('../pageobjects/copydeck.js')
const searchData = require('../fixtures/copy-deck')
const makePaymentPage = require('../pageobjects/make-payment.js')
const eligibilityPage = require('../pageobjects/eligibility.js')

describe('Copy Deck', function () {
    it("AC-1 Privacy text", async () => {
      await browser.url('/')
      await copydeckPage.clickOnPrivacyLink()
      await chaiExpect(await copydeckPage.getPrivacyText()).equals(searchData.content.privacy)

    })
    it("AC-2 Accessibility statement text", async () => {
      await browser.url('/')
      await copydeckPage.clickOnAccessibilityLink()
      await chaiExpect(await copydeckPage.getPrivacyText()).equals(searchData.content.accessibility)
    })
    it("AC-3 Cookies text", async () => {
      await browser.url('/')
      await copydeckPage.clickOnCookiesLink()
      await chaiExpect(await copydeckPage.getPrivacyText()).equals(searchData.content.cookies)
    })
    it("AC-4 Ivory type Help text", async () => {
      await browser.url('/')
        await makePaymentPage.selecthowcertainRadioBtn()
        await makePaymentPage.clickContinueBtn()
        await copydeckPage.clickOnIvoryTypelink()
      await chaiExpect(await copydeckPage.getIvoryTypeHelpText()).equals('Use our eligibility checker to check if you can sell or hire out your item.')
    })
    it("AC-5 cert exemption help text", async () => {
      await browser.url('/')
      await makePaymentPage.selecthowcertainRadioBtn()
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.selectRmiItemFive()
      await makePaymentPage.clickContinueBtn()
      await copydeckPage.clickOncertExemptionlink()
      await chaiExpect(await copydeckPage.getcertExemptionHelpText()).equals(searchData.content.certExemptionHelpText)
      await chaiExpect(await copydeckPage.getalreadyCertifiedHintText()).equals("The certificate has been cancelled or 'revoked'")

    
    })
    it("AC-6 cert exemption help text", async () => {
      await browser.url('/')
      await makePaymentPage.selecthowcertainRadioBtn()
      await makePaymentPage.clickContinueBtn()
      await chaiExpect(await copydeckPage.getwhatIsYourIvoryText()).equals(searchData.content.whatIsYourIvoryTexts)
    })
    it("AC-7 how certain help text", async () => {
      await browser.url('/')
      await chaiExpect(   await copydeckPage.gethowCertainhintText()).equals("To use this service, you must be completely certain.\nIf you’re still unsure, we can help you decide.")
    })
    it("AC-8 contain elephant ivory help text", async () => {
      await browser.url('/')
      await eligibilityPage.selecthowCertain2RadioBtn()
      await makePaymentPage.clickContinueBtn()
      await chaiExpect(await copydeckPage.getcontainElephantIvoryHelpText()).equals("Any ivory in your item must be ‘worked’ ivory. This means it has been carved or significantly altered from its original raw state in some way.")
    })
    it("AC-9 How do I know help text", async () => {
      await browser.url('/')
      await eligibilityPage.selecthowCertain2RadioBtn()
      await makePaymentPage.clickContinueBtn()
      await copydeckPage.clickOnhowDoIKnowlink()
      await chaiExpect(await copydeckPage.gethowDoIKnowHelpText()).equals("It can be extremely difficult to tell the difference between:\nelephant ivory\nother types of ivory, such as walrus\nfake ivory, such as ivorine\ncertain types of animal bone\nIf you are not sure about the item you want to sell or buy, you should consult an expert first, such as an antiques dealer or auctioneer who specialises in ivory.")
    })
    it("AC-10 Joint responsibility text", async () => {
      await browser.url('/')
      await makePaymentPage.selecthowcertainRadioBtn()
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.selectRmiItemFive()
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.selectwhatTypeOfItemIsItRadioBtn()
      await makePaymentPage.enterCertNumber('AB12CD34')
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.clickContinueBtn()
      await chaiExpect(await copydeckPage.getjointResponsibilityText()).equals(searchData.content.jointResponsibityText)
    })
    it("AC-11 declaration to hire or sell out text", async () => {
      await browser.url('/')
      await makePaymentPage.selecthowcertainRadioBtn()
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.selectRmiItemFive()
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.selectwhatTypeOfItemIsItRadioBtn()
      await makePaymentPage.enterCertNumber('AB12CD34')
      await makePaymentPage.clickContinueBtn()
      await chaiExpect(await copydeckPage.getdeclarationToSellOrHireOutText()).equals(searchData.content.declarationToSellOrHireOutTexts)
    })
    it("AC-12 add item photo text", async () => {
      await browser.url('/')
      await makePaymentPage.selecthowcertainRadioBtn()
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.selectRmiItemFive()
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.selectnowhatTypeOfItemIsItRadioBtn()
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.clickonappliedBefore()
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.enterpreviousApplicationNumber('AB12CD34')
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.clickContinueBtn()
      await makePaymentPage.clickContinueBtn()
      await chaiExpect(await copydeckPage.getaddPhotoOfItemtText()).equals(searchData.content.addPhotoOfItem)
    })
})